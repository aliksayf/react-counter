{"version":3,"sources":["CounerItem.js","NewItem.js","Counters.js","App.js","serviceWorker.js","index.js"],"names":["CounterItem","props","list","name","value","id","onClick","counterChange","removeItem","resetItem","NewItem","useState","itemName","setItemName","itemValue","setItemValue","onChange","e","target","addItem","items","Counters","counterList","setCounterList","difference","array","map","el","filter","reduce","a","b","key","nameItem","valueItem","push","Math","random","console","log","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6OAEe,SAASA,EAAYC,GAAQ,IAAD,iBAERA,EAAMC,MAA9BC,EAFgC,EAEhCA,KAAMC,EAF0B,EAE1BA,MAAOC,EAFmB,EAEnBA,GAEpB,OACI,6BACKF,EACD,4BAAQG,QAAS,kBAAIL,EAAMM,cAAcF,GAAK,KAA9C,KACCD,EACD,4BAAQE,QAAS,kBAAIL,EAAMM,cAAcF,EAAI,KAA7C,KACA,4BAAQC,QAAS,kBAAIL,EAAMO,WAAWH,KAAtC,KACA,4BAAQC,QAAS,kBAAIL,EAAMQ,UAAUJ,KAArC,MCXG,SAASK,EAAQT,GAAQ,IAAD,EAEHU,mBAAS,IAFN,mBAE5BC,EAF4B,KAElBC,EAFkB,OAGDF,mBAAS,GAHR,mBAG5BG,EAH4B,KAGjBC,EAHiB,KAanC,OACI,+CAEI,2BAAOC,SAAU,SAACC,GAAD,OAXCd,EAWqBc,EAAEC,OAAOd,WAVpDS,EAAYV,GADS,IAACA,KAYlB,2BAAOa,SAAU,SAACC,GAAD,OAREb,EAQqBa,EAAEC,OAAOd,WAPrDW,GAAcX,GADQ,IAACA,KASnB,4BAAQE,QAAS,kBAAIL,EAAMkB,QAAQP,EAAUE,KAA7C,QChBZ,IAAMM,EAAQ,CACV,CAACjB,KAAM,QAASC,MAAO,GAAIC,GAAI,GAC/B,CAACF,KAAM,SAAUC,MAAO,GAAIC,GAAI,IAGrB,SAASgB,IAAY,IAAD,EAGOV,mBAASS,GAHhB,mBAGxBE,EAHwB,KAGXC,EAHW,KAKzBhB,EAAgB,SAACF,EAAImB,GACvB,IAAIC,EAAK,YAAOH,GAChBG,EAAMC,KAAI,SAAAC,GAAE,OAAIA,EAAGtB,KAAOA,EAAKsB,EAAGvB,OAASoB,EAAa,MACxDD,EAAeE,IAGbjB,EAAa,SAACH,GAChB,IAAIoB,EAAQH,EAAYM,QAAO,SAAAD,GAAE,OAAIA,EAAGtB,KAAOA,KAC/CkB,EAAeE,IAGbhB,EAAY,SAACJ,GACf,IAAIoB,EAAK,YAAOH,GAChBG,EAAMC,KAAI,SAAAC,GAAE,OAAGA,EAAGtB,KAAOA,EAAKsB,EAAGvB,MAAQ,EAAI,MAC7CmB,EAAeE,IAgBnB,OACI,uCACYH,EAAYI,KAAI,SAAAC,GAAE,OAAIA,EAAGvB,SAAOyB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAC7D,4BAAQzB,QATG,WACf,IAAImB,EAAK,YAAOH,GAChBG,EAAMC,KAAI,SAAAC,GAAE,OAAIA,EAAGvB,MAAQ,KAC3BmB,EAAeE,KAMX,aAECH,EAAYI,KAAI,SAAAC,GAAE,OAAI,kBAAC3B,EAAD,CACnBgC,IAAKL,EAAGtB,GACRH,KAAMyB,EACNpB,cAAeA,EACfC,WAAYA,EACZC,UAAWA,OAGf,kBAACC,EAAD,CAASS,QA1BD,SAACc,EAAUC,GACvB,IAAIT,EAAK,YAAOH,GAChBG,EAAMU,KAAK,CAAChC,KAAM8B,EAAU7B,MAAO8B,EAAW7B,GAAI+B,KAAKC,WACvDd,EAAeE,GACfa,QAAQC,IAAI,WCvBLC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACpB,EAAD,QCKcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.c608ab64.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport default function CounterItem(props) {\r\n\r\n    const {name, value, id} = { ...props.list };\r\n\r\n    return (\r\n        <div>\r\n            {name}\r\n            <button onClick={()=>props.counterChange(id, -1)}>-</button>\r\n            {value}\r\n            <button onClick={()=>props.counterChange(id, 1)}>+</button>\r\n            <button onClick={()=>props.removeItem(id)}>X</button>\r\n            <button onClick={()=>props.resetItem(id)}>O</button>\r\n        </div>\r\n    );\r\n};","import React, { useState } from 'react';\r\n\r\nexport default function NewItem(props) {\r\n\r\n    const [itemName, setItemName] = useState('');\r\n    const [itemValue, setItemValue] = useState(0);\r\n\r\n    const inputNameHandler = (name) => {\r\n        setItemName(name);\r\n    };\r\n\r\n    const inputValueHandler = (value) => {\r\n        setItemValue(+value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            Add new counter\r\n            <input onChange={(e)=>inputNameHandler(e.target.value)}/>\r\n            <input onChange={(e)=>inputValueHandler(e.target.value)}/>\r\n            <button onClick={()=>props.addItem(itemName, itemValue)}>Add</button>\r\n        </div>\r\n    );  \r\n};","import React, {useState} from 'react';\r\nimport CounterItem from \"./CounerItem\";\r\nimport NewItem from \"./NewItem\";\r\n\r\nconst items = [\r\n    {name: 'First', value: 12, id: 1},\r\n    {name: 'Second', value: 13, id: 2}\r\n];\r\n\r\nexport default function Counters() {\r\n\r\n\r\n    const [counterList, setCounterList] = useState(items);\r\n\r\n    const counterChange = (id, difference) => {\r\n        let array = [...counterList];\r\n        array.map(el => el.id === id ? el.value += difference : '');\r\n        setCounterList(array);\r\n    };\r\n\r\n    const removeItem = (id) => {\r\n        let array = counterList.filter(el => el.id !== id);\r\n        setCounterList(array);\r\n    };\r\n\r\n    const resetItem = (id) => {\r\n        let array = [...counterList];\r\n        array.map(el=> el.id === id ? el.value = 0 : '');\r\n        setCounterList(array);\r\n    };\r\n\r\n    const addItem = (nameItem, valueItem) => {\r\n        let array = [...counterList];\r\n        array.push({name: nameItem, value: valueItem, id: Math.random()});\r\n        setCounterList(array);\r\n        console.log('add')\r\n    };\r\n\r\n    const resetTotal = () => {\r\n        let array = [...counterList]\r\n        array.map(el => el.value = 0);\r\n        setCounterList(array);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            Total: {counterList.map(el => el.value).reduce((a, b) => a + b)}\r\n            <button onClick={resetTotal}>Reset All</button>\r\n\r\n            {counterList.map(el => <CounterItem\r\n                key={el.id}\r\n                list={el}\r\n                counterChange={counterChange}\r\n                removeItem={removeItem}\r\n                resetItem={resetItem}\r\n                />)}\r\n\r\n            <NewItem addItem={addItem}/>\r\n        </div>\r\n    );\r\n};","import React from 'react';\nimport './App.css';\nimport Counters from \"./Counters\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counters/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}