{"version":3,"sources":["CounerItem.js","NewItem.js","ModalWindow.js","Counters.js","App.js","serviceWorker.js","index.js"],"names":["CounterItem","props","list","name","value","id","ListGroupItem","Row","Col","xs","InputGroupAddon","addonType","ButtonToolbar","ButtonGroup","Button","onClick","counterChange","disabled","outline","color","removeItem","resetItem","NewItem","useState","itemName","setItemName","itemValue","setItemValue","InputGroup","Input","onChange","e","target","placeholder","addItem","ModalExample","className","toggle","modal","Modal","isOpen","ModalBody","ModalFooter","items","Counters","counterList","setCounterList","setModal","difference","array","map","el","filter","Alert","length","reduce","a","b","size","ListGroup","key","nameItem","valueItem","push","Math","random","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53534c52.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    ButtonToolbar,\r\n    Button,\r\n    Col,\r\n    Row,\r\n    ButtonGroup,\r\n    ListGroupItem,\r\n    InputGroupAddon,\r\n} from 'reactstrap';\r\n\r\nexport default function CounterItem(props) {\r\n\r\n    const {name, value, id} = {...props.list};\r\n\r\n    return (\r\n        <ListGroupItem>\r\n            {/*<InputGroup>*/}\r\n            <Row>\r\n\r\n\r\n                <Col xs='5'>\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                        {name}\r\n                    </InputGroupAddon>\r\n                </Col>\r\n                <Col xs='6'>\r\n\r\n            <ButtonToolbar>\r\n                <ButtonGroup>\r\n                    <Button onClick={() => props.counterChange(id, -1)}>-</Button>\r\n                    <Button disabled={true} >\r\n                        <InputGroupAddon addonType=\"append\" xs='3' outline color=\"secondary\">\r\n                            {value}\r\n                        </InputGroupAddon>\r\n                    </Button>\r\n                    <Button onClick={() => props.counterChange(id, 1)}>+</Button>\r\n                </ButtonGroup>\r\n                <ButtonGroup>\r\n                    <Button color=\"danger\" onClick={() => props.removeItem(id)}>Delete</Button>\r\n                    <Button color=\"warning\" onClick={() => props.resetItem(id)}>Reset</Button>\r\n                </ButtonGroup>\r\n            </ButtonToolbar>\r\n                </Col>\r\n            </Row>\r\n            {/*</InputGroup>*/}\r\n        </ListGroupItem>\r\n    );\r\n};","import React, {useState} from 'react';\r\nimport {InputGroup, InputGroupAddon, Input, Button, ListGroupItem, Col, Row} from 'reactstrap';\r\n\r\nexport default function NewItem(props) {\r\n\r\n    const [itemName, setItemName] = useState('');\r\n    const [itemValue, setItemValue] = useState(0);\r\n\r\n    const inputNameHandler = (name) => {\r\n        setItemName(name);\r\n    };\r\n\r\n    const inputValueHandler = (value) => {\r\n        setItemValue(+value);\r\n    };\r\n\r\n    return (\r\n        <ListGroupItem color=\"secondary\">\r\n\r\n            <Row>\r\n                <InputGroup>\r\n                    <Col xs='2'>\r\n                        <InputGroupAddon addonType=\"prepend\">\r\n                            New counter\r\n                        </InputGroupAddon>\r\n                    </Col>\r\n                        <InputGroupAddon addonType=\"append\">\r\n                            <Input onChange={(e) => inputNameHandler(e.target.value)}\r\n                                   placeholder=\"Counter name\"/>\r\n                            <Input onChange={(e) => inputValueHandler(e.target.value)}\r\n                                   placeholder=\"Counter value\"/>\r\n                            <Button addonType=\"prepend\" color=\"secondary\"\r\n                                    onClick={() => props.addItem(itemName, itemValue)}>Add\r\n                            </Button>\r\n                        </InputGroupAddon>\r\n                </InputGroup>\r\n            </Row>\r\n        </ListGroupItem>\r\n    );\r\n};","import React from 'react';\r\nimport { Button, Modal, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst ModalExample = (props) => {\r\n    const {\r\n        className,\r\n        toggle,\r\n        modal\r\n    } = props;\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Modal isOpen={modal} toggle={toggle} className={className}>\r\n                <ModalBody toggle={toggle}>Please enter counter name!</ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"secondary\" onClick={toggle}>Close</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalExample;","import React, {useState} from 'react';\r\nimport CounterItem from \"./CounerItem\";\r\nimport NewItem from \"./NewItem\";\r\nimport ModalExample from './ModalWindow';\r\nimport {Alert, Button, ListGroup, } from 'reactstrap';\r\n\r\nconst items = [\r\n    {name: 'First', value: 12, id: 1},\r\n    {name: 'Second', value: 13, id: 2}\r\n];\r\n\r\nexport default function Counters() {\r\n\r\n\r\n    const [counterList, setCounterList] = useState(items);\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const toggle = () => setModal(!modal);\r\n\r\n\r\n    const counterChange = (id, difference) => {\r\n        let array = [...counterList];\r\n        array.map(el => el.id === id ? el.value += difference : '');\r\n        setCounterList(array);\r\n    };\r\n\r\n    const removeItem = (id) => {\r\n        let array = counterList.filter(el => el.id !== id);\r\n        setCounterList(array);\r\n    };\r\n\r\n    const resetItem = (id) => {\r\n        let array = [...counterList];\r\n        array.map(el => el.id === id ? el.value = 0 : '');\r\n        setCounterList(array);\r\n    };\r\n\r\n    const addItem = (nameItem, valueItem) => {\r\n        if(nameItem !== ''){\r\n            let array = [...counterList];\r\n            array.push({name: nameItem, value: valueItem, id: Math.random()});\r\n            setCounterList(array);\r\n        }else toggle();\r\n    };\r\n\r\n    const resetTotal = () => {\r\n        let array = [...counterList]\r\n        array.map(el => el.value = 0);\r\n        setCounterList(array);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Alert color=\"dark\"\r\n                   className=\"d-flex align-items-center justify-content-center \">\r\n                <h3>\r\n                    Total:\r\n                    {counterList.length !== 0 ? counterList.map(el => el.value).reduce((a, b) => a + b) : 0}\r\n                    <Button size=\"md\" color=\"warning\" onClick={resetTotal}>Reset All</Button>\r\n                </h3>\r\n            </Alert>\r\n            <ListGroup>\r\n\r\n                {counterList.map(el => <CounterItem\r\n                    key={el.id}\r\n                    list={el}\r\n                    counterChange={counterChange}\r\n                    removeItem={removeItem}\r\n                    resetItem={resetItem}\r\n                />)}\r\n\r\n            </ListGroup>\r\n            <NewItem addItem={addItem}/>\r\n            <ModalExample modal={modal}\r\n                          toggle={toggle}/>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\n// import './App.css';\r\nimport { Container } from 'reactstrap';\r\nimport Counters from \"./Counters\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container className=\"themed-container\">\r\n      <Counters/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}