{"version":3,"sources":["CounerItem.js","NewItem.js","ModalWindow.js","Counters.js","App.js","serviceWorker.js","index.js"],"names":["CounterItem","props","list","name","value","id","ListGroupItem","Row","Col","xs","InputGroupAddon","addonType","ButtonToolbar","ButtonGroup","Button","onClick","counterChange","disabled","outline","color","removeItem","resetItem","NewItem","useState","itemName","setItemName","itemValue","setItemValue","nameValidator","setNameValidator","submitButtonHandler","addItem","keyPressed","e","key","InputGroup","Input","onChange","target","placeholder","onKeyPress","invalid","type","ModalExample","className","toggle","modal","counterName","disabledDelete","setDisabledDelete","deleteHandler","Modal","isOpen","ModalHeader","ModalBody","trim","toLowerCase","checkConfirmName","ModalFooter","items","Counters","counterList","setCounterList","setModal","removedCounter","setRemovedCounter","map","el","difference","array","Alert","length","reduce","a","b","size","ListGroup","nameItem","valueItem","push","Math","random","filter","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67594a3d.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    ButtonToolbar,\r\n    Button,\r\n    Col,\r\n    Row,\r\n    ButtonGroup,\r\n    ListGroupItem,\r\n    InputGroupAddon,\r\n} from 'reactstrap';\r\n\r\nexport default function CounterItem(props) {\r\n\r\n    const {name, value, id} = {...props.list};\r\n\r\n    return (\r\n        <ListGroupItem>\r\n            {/*<InputGroup>*/}\r\n            <Row>\r\n                <Col xs='5'>\r\n                    <InputGroupAddon addonType=\"\">\r\n                        {name}\r\n                    </InputGroupAddon>\r\n                </Col>\r\n                <Col xs='6'>\r\n                    <ButtonToolbar>\r\n                        <ButtonGroup>\r\n                            <Button onClick={() => props.counterChange(id, -1)}>-</Button>\r\n                            <Button disabled={true}>\r\n                                <InputGroupAddon outline color=\"secondary\" addonType=\"\">\r\n                                    {value}\r\n                                </InputGroupAddon>\r\n                            </Button>\r\n                            <Button onClick={() => props.counterChange(id, 1)}>+</Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup>\r\n                            <Button color=\"danger\" onClick={() => props.removeItem(id)}>Delete</Button>\r\n                            <Button color=\"warning\" onClick={() => props.resetItem(id)}>Reset</Button>\r\n                        </ButtonGroup>\r\n                    </ButtonToolbar>\r\n                </Col>\r\n            </Row>\r\n            {/*</InputGroup>*/}\r\n        </ListGroupItem>\r\n    );\r\n};","import React, {useState} from 'react';\r\nimport {InputGroup, InputGroupAddon, Input, Button, ListGroupItem, Col, Row} from 'reactstrap';\r\n\r\nexport default function NewItem(props) {\r\n\r\n    const [itemName, setItemName] = useState('');\r\n    const [itemValue, setItemValue] = useState(null);\r\n    const [nameValidator, setNameValidator] = useState(0)\r\n\r\n    const inputNameHandler = (name) => {\r\n        setItemName(name);\r\n        setNameValidator(0);\r\n    };\r\n\r\n    const inputValueHandler = (value) => {\r\n        setItemValue(value);\r\n    };\r\n\r\n    const submitButtonHandler = () => {\r\n        if (itemName !== '') {\r\n            props.addItem(itemName, itemValue);\r\n            setNameValidator(0);\r\n            setItemName('');\r\n            setItemValue(null);\r\n        } else {\r\n            setNameValidator(1);\r\n        }\r\n    };\r\n\r\n    const keyPressed = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            submitButtonHandler();\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <ListGroupItem color=\"secondary\">\r\n\r\n            <Row>\r\n                <InputGroup>\r\n                    <Col xs='3'>\r\n                        <InputGroupAddon addonType=\"\">\r\n                            New counter\r\n                        </InputGroupAddon>\r\n                    </Col>\r\n                    <InputGroupAddon addonType=\"append\">\r\n                        <Input onChange={(e) => inputNameHandler(e.target.value)}\r\n                               placeholder=\"Counter name\"\r\n                               value={itemName}\r\n                               onKeyPress={keyPressed}\r\n                               invalid={nameValidator}/>\r\n                        <Input onChange={(e) => inputValueHandler(e.target.value)}\r\n                               placeholder=\"Counter value\"\r\n                               type='number'\r\n                               value={itemValue}\r\n                               onKeyPress={keyPressed}/>\r\n                        <Button addonType=\"prepend\" color=\"secondary\"\r\n                                onClick={submitButtonHandler}>Add\r\n                        </Button>\r\n                    </InputGroupAddon>\r\n                </InputGroup>\r\n            </Row>\r\n        </ListGroupItem>\r\n    );\r\n};","import React, {useState} from 'react';\r\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader, Input} from 'reactstrap';\r\n\r\nconst ModalExample = (props) => {\r\n    const {\r\n        className,\r\n        toggle,\r\n        modal,\r\n        counterName,\r\n        removeItem\r\n    } = props;\r\n\r\n    const [disabledDelete, setDisabledDelete] = useState(true);\r\n\r\n    const checkConfirmName = (e) => {\r\n        if (e.trim().toLowerCase() === counterName.name.toLowerCase()) {\r\n            setDisabledDelete(false);\r\n        } else setDisabledDelete(true);\r\n    }\r\n\r\n    const deleteHandler = () => {\r\n        toggle();\r\n        removeItem(counterName.id);\r\n    };\r\n\r\n    const keyPressed = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            deleteHandler()\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Modal isOpen={modal} toggle={toggle} className={className}>\r\n                <ModalHeader toggle={toggle}>Delete confirmation</ModalHeader>\r\n                <ModalBody toggle={toggle}>\r\n                    Please enter counter name <strong>{counterName.name}</strong> to delete it\r\n                </ModalBody>\r\n                <Input onChange={(e) => checkConfirmName(e.target.value)} onKeyPress={keyPressed}/>\r\n                <ModalFooter>\r\n                    <Button disabled={disabledDelete} color=\"danger\" onClick={deleteHandler}>Delete</Button>\r\n                    <Button color=\"secondary\" onClick={toggle}>Close</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModalExample;","import React, {useState} from 'react';\r\nimport CounterItem from \"./CounerItem\";\r\nimport NewItem from \"./NewItem\";\r\nimport ModalExample from './ModalWindow';\r\nimport {Alert, Button, ListGroup,} from 'reactstrap';\r\n\r\nconst items = [\r\n    {name: 'First', value: 12, id: 1},\r\n    {name: 'Second', value: 13, id: 2}\r\n];\r\n\r\nexport default function Counters() {\r\n\r\n\r\n    const [counterList, setCounterList] = useState(items);\r\n    const [modal, setModal] = useState(false);\r\n    const [removedCounter, setRemovedCounter] = useState({});\r\n\r\n    const toggle = (id) => {\r\n        setModal(!modal);\r\n        counterList.map(el => el.id === id ? setRemovedCounter({...el}) : '');\r\n\r\n    };\r\n\r\n\r\n    const counterChange = (id, difference) => {\r\n        let array = [...counterList];\r\n        array.map(el => el.id === id ? el.value += difference : '');\r\n        setCounterList(array);\r\n    };\r\n\r\n    const removeItem = (id) => {\r\n        toggle(id);\r\n        let array = counterList.filter(el => el.id !== id);\r\n        setCounterList(array);\r\n    };\r\n\r\n    const resetItem = (id) => {\r\n        let array = [...counterList];\r\n        array.map(el => el.id === id ? el.value = 0 : '');\r\n        setCounterList(array);\r\n    };\r\n\r\n    const addItem = (nameItem, valueItem) => {\r\n        let array = [...counterList];\r\n        array.push({name: nameItem, value: +valueItem, id: Math.random()});\r\n        setCounterList(array);\r\n    };\r\n\r\n    const resetTotal = () => {\r\n        let array = [...counterList]\r\n        array.map(el => el.value = 0);\r\n        setCounterList(array);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Alert color=\"dark\"\r\n                   className=\"d-flex align-items-center justify-content-center \">\r\n                <h3>\r\n                    Total:\r\n                    {counterList.length !== 0 ? counterList.map(el => el.value).reduce((a, b) => a + b) : 0}\r\n                    <Button size=\"md\" color=\"warning\" onClick={resetTotal}>Reset All</Button>\r\n                </h3>\r\n            </Alert>\r\n            <ListGroup>\r\n\r\n                {counterList.map(el => <CounterItem\r\n                    key={el.id}\r\n                    list={el}\r\n                    counterChange={counterChange}\r\n                    removeItem={toggle}\r\n                    resetItem={resetItem}\r\n                />)}\r\n\r\n            </ListGroup>\r\n            <NewItem addItem={addItem}/>\r\n            <ModalExample modal={modal}\r\n                          toggle={toggle}\r\n                          counterName={removedCounter}\r\n                          removeItem={removeItem}/>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\n// import './App.css';\r\nimport { Container } from 'reactstrap';\r\nimport Counters from \"./Counters\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container className=\"themed-container\">\r\n      <Counters/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}